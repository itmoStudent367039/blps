services:
  user_db:
    image: 'postgres:latest'
    environment:
      - POSTGRES_DB=${POSTGRES_DB}
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD}
      - POSTGRES_USER=${POSTGRES_USER}
    ports:
      - "${USER_DB_PORT}:${USER_DB_PORT}"
    command: [ "-p", "${USER_DB_PORT}", "-c", "max_prepared_transactions=100" ]
    networks:
      - app-network

  auth_db:
    image: 'postgres:latest'
    environment:
      - POSTGRES_DB=${POSTGRES_DB}
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD}
      - POSTGRES_USER=${POSTGRES_USER}
    ports:
      - "${AUTH_DB_PORT}:${AUTH_DB_PORT}"
    command: [ "-p", "${AUTH_DB_PORT}" ]
    networks:
      - app-network

  booking_db:
    image: 'postgres:latest'
    environment:
      - POSTGRES_DB=${POSTGRES_DB}
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD}
      - POSTGRES_USER=${POSTGRES_USER}
    ports:
      - "${BOOKING_DB_PORT}:${BOOKING_DB_PORT}"
    command: [ "-p", "${BOOKING_DB_PORT}", "-c", "max_prepared_transactions=100" ]
    networks:
      - app-network

  rabbitmq:
    image: rabbitmq:3-management
    container_name: rabbitmq
    ports:
      - "${RABBITMQ_PORT}:${RABBITMQ_PORT}"
      - "${RABBITMQ_MANAGEMENT_PORT}:${RABBITMQ_MANAGEMENT_PORT}"
    environment:
      RABBITMQ_DEFAULT_USER: ${RABBITMQ_DEFAULT_USER}
      RABBITMQ_DEFAULT_PASS: ${RABBITMQ_DEFAULT_PASS}
    networks:
      - app-network

  monolith:
    build:
      context: ./monolith
      dockerfile: Dockerfile
    depends_on:
      - user_db
      - booking_db
      - rabbitmq
      - payment
      - broker
    environment:
      SPRING_DATASOURCE_URL: jdbc:postgresql://${BOOKING_DB_HOST}:${BOOKING_DB_PORT}/${POSTGRES_DB}
      SPRING_DATASOURCE_USERNAME: ${POSTGRES_USER}
      SPRING_DATASOURCE_PASSWORD: ${POSTGRES_PASSWORD}
      HOTELS_DATASOURCE_URL: jdbc:postgresql://${USER_DB_HOST}:${USER_DB_PORT}/${POSTGRES_DB}
      HOTELS_DATASOURCE_USERNAME: ${POSTGRES_USER}
      HOTELS_DATASOURCE_PASSWORD: ${POSTGRES_PASSWORD}
      SPRING_RABBITMQ_HOST: ${RABBITMQ_HOST}
      SPRING_RABBITMQ_PORT: ${RABBITMQ_PORT}
      PAYMENT: http://${PAYMENT_HOST}:${PAYMENT_PORT}/payment/api
      TARIFFS_EXISTS: http://${API_GATEWAY_HOST}:${API_GATEWAY_PORT}/hotels/api/tariffs/exists
      TARIFFS_PRICE: http://${API_GATEWAY_HOST}:${API_GATEWAY_PORT}/hotels/api/tariffs/price
      RABBIT_USERNAME: ${RABBITMQ_DEFAULT_USER}
      RABBIT_PASSWORD: ${RABBITMQ_DEFAULT_PASS}
      MONOLITH_PORT: ${MONOLITH_PORT}
      KAFKA_TOPIC_NAME: ${KAFKA_TOPIC_NAME}
      KAFKA_URL: ${KAFKA_URL}
    ports:
      - "${MONOLITH_PORT}:${MONOLITH_PORT}"
    networks:
      - app-network

  hotels:
    build:
      context: ./hotels
      dockerfile: Dockerfile
    depends_on:
      - user_db
    environment:
      SPRING_DATASOURCE_URL: jdbc:postgresql://${USER_DB_HOST}:${USER_DB_PORT}/${POSTGRES_DB}
      SPRING_DATASOURCE_USERNAME: ${POSTGRES_USER}
      SPRING_DATASOURCE_PASSWORD: ${POSTGRES_PASSWORD}
      HOTELS_PORT: ${HOTELS_PORT}
    ports:
      - "${HOTELS_PORT}:${HOTELS_PORT}"
    networks:
      - app-network

  api-gateway:
    build:
      context: ./api-gateway
      dockerfile: Dockerfile
    depends_on:
      - auth_db
    environment:
      SPRING_DATASOURCE_URL: jdbc:postgresql://${AUTH_DB_HOST}:${AUTH_DB_PORT}/${POSTGRES_DB}
      SPRING_DATASOURCE_USERNAME: ${POSTGRES_USER}
      SPRING_DATASOURCE_PASSWORD: ${POSTGRES_PASSWORD}
      MONOLITH: http://${MONOLITH_HOST}:${MONOLITH_PORT}
      HOTELS: http://${HOTELS_HOST}:${HOTELS_PORT}
      API_GATEWAY_PORT: ${API_GATEWAY_PORT}
    ports:
      - "${API_GATEWAY_PORT}:${API_GATEWAY_PORT}"
    networks:
      - app-network

  payment:
    build:
      context: ./payment
      dockerfile: Dockerfile
    depends_on:
      - user_db
      - rabbitmq
    environment:
      SPRING_RABBITMQ_HOST: ${RABBITMQ_HOST}
      SPRING_RABBITMQ_PORT: ${RABBITMQ_PORT}
      CLIENT: http://${MONOLITH_HOST}:${MONOLITH_PORT}
      PAYMENT_PORT: ${PAYMENT_PORT}
      RABBIT_USERNAME: ${RABBITMQ_DEFAULT_USER}
      RABBIT_PASSWORD: ${RABBITMQ_DEFAULT_PASS}
      YOOKASSA_ACCOUNT_ID: ${YOOKASSA_ACCOUNT_ID}
      YOOKASSA_ACCOUNT_KEY: ${YOOKASSA_ACCOUNT_KEY}
      YOOKASSA_WK: ${YOOKASSA_WK}
    ports:
      - "${PAYMENT_PORT}:${PAYMENT_PORT}"
    networks:
      - app-network

  zookeeper:
    image: confluentinc/cp-zookeeper:6.2.0
    container_name: zookeeper
    environment:
      ZOOKEEPER_SERVER_ID: 1
      ZOOKEEPER_CLIENT_PORT: 2181
      ZOOKEEPER_TICK_TIME: 2000
    ports:
      - '22181:2181'
    networks:
      - app-network

  broker:
    image: confluentinc/cp-kafka:latest
    container_name: broker
    ports:
      - "9092:9092"
    depends_on:
      - zookeeper
    environment:
      KAFKA_BROKER_ID: 1
      KAFKA_AUTO_CREATE_TOPICS_ENABLE: "true"
      KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: PLAINTEXT:PLAINTEXT
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://broker:9092
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
      KAFKA_TRANSACTION_STATE_LOG_MIN_ISR: 1
      KAFKA_TRANSACTION_STATE_LOG_REPLICATION_FACTOR: 1
    networks:
      - app-network

  mail-sender:
    build: ./mail-sender
    ports:
      - "1337:1337"
    environment:
      - 'SERVER_PORT=1337'
      - 'EMAIL_SENDER_HOST=smtp.gmail.com'
      - 'EMAIL_SENDER_PORT=587'
      - 'EMAIL_SENDER_ID=igor.abdullin.2004@gmail.com'
      - 'EMAIL_SENDER_PASSWORD=fobfllhkdwazxkon'
      - 'KAFKA_BOOTSTRAP_SERVERS=broker:9092'
      - 'KAFKA_CLIENT_ID=demo-producer'
      - 'KAFKA_TOPIC_NAME=topicName'
    command: java -jar app.jar
    depends_on:
      - broker
    networks:
      - app-network

networks:
  app-network:
    driver: bridge